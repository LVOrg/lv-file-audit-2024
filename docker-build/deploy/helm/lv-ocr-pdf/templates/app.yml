kind: Deployment
apiVersion: apps/v1
metadata:
  name: lv-ocr-pdf
  namespace: {{ .Values.ns }}

spec:
  replicas: 1
  selector:
    matchLabels:
      app: lv-ocr-pdf
  template:
    metadata:
      labels:
        app: lv-ocr-pdf
    spec:
      containers:
        - image: apache/tika:latest
          resources:
            requests:
              memory: "1Gi"
            limits:
              memory: "2Gi"
          name: tika
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 9998
        - name: lv-ocr-pdf-net
          image: {{ .Values.images.net_ocr }}
          resources:
            limits:
              cpu: '1'
              memory: "2Gi"
        - name: lv-ocr-pdf
          image: {{ .Values.images.pdf_ocr }}
          command: [ "python3" ]  # Adjust if your Python interpreter is different
          args:
            - /app/cy_jobs/jobs/task_saas_ocr_recent.py
            - early=1
            - app_name={{ .Values.app_name }}
            - version={{ .Values.version }}
            - db_codx={{ .Values.db_codx }}
            - ocr_url=http://localhost:5000
            - private_web_api=http://lv-file-service.{{ .Values.ns }}:80/lvfile
            - remote_office=http://lv-office-service.{{ .Values.ns }}:80
            - remote_pdf=http://lv-pdf-service.{{ .Values.namespace }}:80
            - remote_video=http://lv-video-service.{{ .Values.ns }}:80
            - tika_server=http://localhost:9998
            - cache_server=lv-file-cache-service.{{ .Values.ns }}:11211
            - content_service=http://content-service.{{ .Values.ns }}:80
            - remote_ocr=http://lv-ocr-service.{{ .Values.ns }}:80
            - debug=false
            - generation=
            - process_services_host=http://localhost
            - bind=0.0.0.0:80
            - content_segment_len=9
            - elastic_search.server=$(elastic_search.server)
            - elastic_search.prefix_index=$(elastic_search.prefix_index)
            - db=$(db)
            - admin_db_name=$(admin_db_name)
            - rabbitmq.server=$(rabbitmq.server)
            - rabbitmq.port=$(rabbitmq.port)
            - rabbitmq.msg=$(rabbitmq.msg)
            - rabbitmq.username=$(rabbitmq.username)
            - rabbitmq.password=$(rabbitmq.password)
            - server_type=Uvicorn
            - worker_class=httptools
            - timeout_keep_alive=$(timeout_keep_alive)
            - timeout_graceful_shutdown=$(timeout_graceful_shutdown)
            - h2_max_concurrent_streams=$(h2_max_concurrent_streams)
            - vn_suggest_url=$(vn_suggest_url)
            - file_storage_path=/mnt/files
            - process_services_host=http://localhost
            - distribute_lock_server=distribute-lock-service.{{ .Values.namespace }}:2181
            - use_ssl=$(use_ssl)
          envFrom:
            - configMapRef:
                name: lv-file-config
          volumeMounts:
            #        - name: shared-volume
            #          mountPath: /app
            - name: storage-files
              mountPath: /mnt/files

      volumes:
        #      - name: shared-volume
        #        emptyDir: {}
        - name: tmp-files
          emptyDir: { }
        - name: socat-share
          emptyDir: { }
        - name: storage-files
          nfs:
            server: {{ .Values.nfs_server }}
            path: {{ .Values.nfs_path }}
      imagePullSecrets:
        - name: harbor-secret-registry

---


