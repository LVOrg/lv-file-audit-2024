---
{{ $info := $.Values.name -}}
    {{ $dataFile := join "" (list "data/" $info ".yml") -}}
    {{ $globalVar := .Files.Get "global/data.yml" | fromYaml -}}

    {{ $data := .Files.Get $dataFile | fromYaml -}}
      {{ $fileJob := $data.fileJob -}}
      {{ $db := $data.config.db -}}
      {{ $es := $data.config.elastic_search -}}
      {{ $rb := $data.config.rabbitmq -}}
      {{ $api := $data.webApi -}}
      {{ $storage := $data.storage}}
      {{ $storage_files := $data.storage_files -}}
      {{ $cache := $data.cache -}}
      {{ $msg := $data.msg -}}
    {{ $dataJson := toPrettyJson $api -}}
{{ $host_map := $data.host_map -}}
---
{{ if $api}}
---
apiVersion: v1
data:
  .dockerconfigjson: eyJhdXRocyI6eyJkb2NrZXIubGFjdmlldC52biI6eyJ1c2VybmFtZSI6InB1bGwiLCJwYXNzd29yZCI6IkxhY3ZpZXQjMTIzIiwiZW1haWwiOiJwdWxsQGxhY3ZpZXQudm4iLCJhdXRoIjoiY0hWc2JEcE1ZV04yYVdWMEl6RXlNdz09In19fQ==
kind: Secret
metadata:
  name: harbor-secret-registry
  namespace: {{$api.namespace}}

type: kubernetes.io/dockerconfigjson
---
# The first we need deploy an application where Pod of web will run inside
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{$api.name}}
  namespace: {{$api.namespace}}
spec:
  selector:
    matchLabels:
      app: {{$api.name}}
  replicas: 1
  #minimumReplicas: {{$api.replicas}}
  template:
    metadata:
      labels:
        app: {{$api.name}}
    spec:
      {{if $host_map}}
      hostAliases:
        - ip: "{{$host_map.ip}}"
          hostnames:
            - "{{$host_map.host}}"
      {{end}}
      volumes:
        - name: tmp-files
          emptyDir: { }
        - name: socat-share
          emptyDir: { }
        - name: {{$storage.name}}
        - name: content-files
        - name: {{$storage.name}}
          {{if hasKey  $storage "className"}}
          persistentVolumeClaim:
            claimName: {{$storage.name}}
          {{else}}
          nfs:
            server: {{$storage.server}}
            path: {{$storage.directory}}
          {{end}}
        {{ if $storage_files }}
        - name: {{$storage_files.name}}
          nfs:
            server: {{$storage_files.server}}
            path: {{$storage_files.directory}}
        {{end}}
      containers:
        - args:
            - python3
            - /app/cy_xdoc/server.py
            - bind=0.0.0.0:80
            - content_segment_len=9
            - host_url='{{$api.hostUrl}}'
            - elastic_search.server=$(elastic_search.server)
            - elastic_search.prefix_index=$(elastic_search.prefix_index)
            - db=$(db)
            - admin_db_name=$(admin_db_name)
            - rabbitmq.server=$(rabbitmq.server)
            - rabbitmq.port=$(rabbitmq.port)
            - rabbitmq.msg=$(rabbitmq.msg)
            - cache_server=$(cache_server)
            - workers=$(workers)
            - server_type=$(server_type.hypercorn)
            - worker_class=$(worker_class.trio)
            - timeout_keep_alive=$(timeout_keep_alive)
            - timeout_graceful_shutdown=$(timeout_graceful_shutdown)
            - h2_max_concurrent_streams=$(h2_max_concurrent_streams)
            - vn_suggest_url=$(vn_suggest_url)
            - tika_server=$(tika_server)
            - file_storage_path=/mnt/files
            - server_thumb_office=http://xdoc-office-thumbs.xdoc-web:8014
            - private_web_api=http://localhost/lvfile
            {{if not $storage_files}}
            - services=""
            {{end}}
          image: {{ $globalVar.images.web.main}}
          volumeMounts:
            - name: tmp-files
              mountPath: /tmp-files
            - name: socat-share
              mountPath: /socat-share
            - mountPath: {{$api.mountPath}}
              name: {{$storage.name}}
            {{ if $storage_files }}
            - mountPath: /mnt/files
              name: {{$storage_files.name}}
            {{end}}


          envFrom:
            - configMapRef:
               name: {{$api.configMapName}}
          name: {{$api.name}}
        {{- range $key, $libs := $globalVar.images.web.libs }}
        - name: {{$key}}
          image: {{$libs}}
          volumeMounts:
            - name: tmp-files
              mountPath: /tmp-files
            - name: socat-share
              mountPath: /socat-share
            - mountPath: {{$api.mountPath}}
              name: {{$storage.name}}
            {{ if $storage_files }}
            - mountPath: /mnt/files
              name: {{$storage_files.name}}
            {{end}}
        {{- end }}
#          imagePullPolicy: Always #{{$api.pullPolicy}}

          ports:
            - containerPort: 80
---
{{end}}
---
#kubectl patch pod xdoc-5d8984b8c-48gfg -p '{"metadata":{"finalizers":null}}' -n xdoc-web